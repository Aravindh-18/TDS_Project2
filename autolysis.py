# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iWjI8y-ptgpLmjGL5YfUo9vkoIsce9U_
"""

import os
import sys
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import requests
import numpy as np
from scipy import stats
from datetime import datetime

# Function to read CSV file
def read_csv(filename):
    """Read the CSV file and return a DataFrame."""
    try:
        df = pd.read_csv(filename, encoding="utf-8")
        print(f"Dataset loaded: {filename}")
        return df
    except UnicodeDecodeError:
        print(f"Encoding issue detected with {filename}. Trying 'latin1'.")
        return pd.read_csv(filename, encoding="latin1")
    except Exception as e:
        print(f"Error loading {filename}: {e}")
        sys.exit(1)

# Function to analyze the dataset
def analyze_data(df):
    """Perform basic analysis on the dataset."""
    return {
        "shape": df.shape,
        "columns": df.columns.tolist(),
        "missing_values": df.isnull().sum().to_dict(),
        "summary_statistics": df.describe(include="all").to_dict()
    }

# Function to generate visualizations
def visualize_data(df, output_prefix):
    """Generate visualizations and save them as files."""
    charts = []

    # Generate a heatmap if there are numeric columns
    numeric_columns = df.select_dtypes(include=["number"]).columns
    if len(numeric_columns) > 0:
        plt.figure(figsize=(10, 8))
        sns.heatmap(df[numeric_columns].corr(), annot=True, cmap="coolwarm", fmt=".2f")
        plt.title("Correlation Heatmap")
        heatmap_file = f"{output_prefix}_heatmap.png"
        plt.savefig(heatmap_file)
        charts.append(heatmap_file)
        plt.close()

    # Generate a bar plot for the first categorical column
    categorical_columns = df.select_dtypes(include=["object"]).columns
    if len(categorical_columns) > 0:
        top_categories = df[categorical_columns[0]].value_counts().head(10)
        plt.figure(figsize=(10, 6))
        top_categories.sort_values().plot(kind="barh", color="skyblue")
        plt.title(f"Top 10 Categories in {categorical_columns[0]}")
        barplot_file = f"{output_prefix}_barplot.png"
        plt.savefig(barplot_file)
        charts.append(barplot_file)
        plt.close()

    return charts

# Function to narrate analysis
def narrate_story(analysis, charts, filename):
    """Generate a narrative summary."""
    summary = f"""
    # Dataset Summary for {filename}
    - Shape: {analysis['shape']}
    - Columns: {analysis['columns']}
    - Missing Values: {analysis['missing_values']}
    - Summary Statistics: See below.

    Refer to the attached charts for further insights.
    """
    if charts:
        for chart in charts:
            summary += f"![Chart]({chart})\n"
    return summary

# Function to save output to README
def save_markdown(story, output_file):
    """Save the analysis and visualization summary to a README file."""
    with open(output_file, "w") as f:
        f.write(story)

# Main function
def main():
    # Check for command-line argument
    if len(sys.argv) != 2:
        print("Usage: uv run autolysis.py <dataset.csv>")
        sys.exit(1)

    input_file = sys.argv[1]

    if not os.path.isfile(input_file):
        print(f"Error: File '{input_file}' not found.")
        sys.exit(1)

    print(f"Processing dataset: {input_file}")

    # Read dataset
    df = read_csv(input_file)

    # Analyze dataset
    analysis = analyze_data(df)

    # Visualize dataset
    output_prefix = os.path.splitext(os.path.basename(input_file))[0]
    charts = visualize_data(df, output_prefix)

    # Narrate story
    story = narrate_story(analysis, charts, input_file)

    # Save README
    output_file = f"README_{output_prefix}.md"
    save_markdown(story, output_file)

    print(f"Analysis completed. Output saved to {output_file}.")

# Entry point for script
if __name__ == "__main__":
    main()

