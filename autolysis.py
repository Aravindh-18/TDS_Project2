# -*- coding: utf-8 -*-
"""autolysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iWjI8y-ptgpLmjGL5YfUo9vkoIsce9U_
"""

# /// script
# requires-python = ">=3.11"
# dependencies = [
#   "pandas",
#   "numpy",
#   "matplotlib",
#   "seaborn",
#   "openai",
#   "tenacity",
# ]
# ///

import os
import sys
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import requests
import numpy as np

# Hardcode the API token
api_proxy_token = "eyJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6IjIyZjMwMDExODBAZHMuc3R1ZHkuaWl0bS5hYy5pbiJ9.8i1XEEYFAzXjZ2_Osxn-bRoZ25s5-CaUIhG7WTnCNRg"
api_proxy_base_url = "https://aiproxy.sanand.workers.dev/openai/v1"

def read_csv(filename):
    """Read the CSV file and return a DataFrame."""
    try:
        df = pd.read_csv(filename, encoding="utf-8")
        print(f"Dataset loaded: {filename}")
        return df
    except UnicodeDecodeError:
        print(f"Encoding issue detected with {filename}. Trying 'latin1'.")
        return pd.read_csv(filename, encoding="latin1")
    except Exception as e:
        print(f"Error loading {filename}: {e}")
        exit()

def analyze_data(df):
    """Perform basic analysis on the dataset."""
    analysis = {
        "shape": df.shape,
        "columns": df.columns.tolist(),
        "missing_values": df.isnull().sum().to_dict(),
        "summary_statistics": df.describe(include="all").to_dict()
    }
    return analysis

def visualize_data(df, output_prefix):
    """Generate visualizations for the dataset."""
    charts = []

    # Example 1: Correlation Heatmap (if numeric data exists)
    numeric_columns = df.select_dtypes(include=["number"]).columns
    if len(numeric_columns) > 0:
        plt.figure(figsize=(14, 12))
        heatmap = sns.heatmap(
            df[numeric_columns].corr(),
            annot=True,
            cmap="coolwarm",
            fmt=".2f"
        )
        heatmap.set_title("Correlation Heatmap")
        heatmap_file = f"{output_prefix}_heatmap.png"
        plt.savefig(heatmap_file, dpi=300)
        charts.append(heatmap_file)
        plt.close()

    # Example 2: Bar Plot for the first categorical column
    categorical_columns = df.select_dtypes(include=["object"]).columns
    if len(categorical_columns) > 0:
        plt.figure(figsize=(14, 8))
        top_categories = df[categorical_columns[0]].value_counts().head(10)
        top_categories.sort_values().plot(kind="barh", color="skyblue")
        plt.title(f"Top 10 {categorical_columns[0]} Categories")
        barplot_file = f"{output_prefix}_barplot.png"
        plt.savefig(barplot_file, dpi=300)
        charts.append(barplot_file)
        plt.close()

    return charts

def narrate_story(analysis, charts, filename):
    """Use GPT-4o-Mini to narrate a story about the analysis."""
    summary_prompt = f"""
    I analyzed a dataset from {filename}. It has the following details:
    - Shape: {analysis['shape']}
    - Columns: {analysis['columns']}
    - Missing Values: {analysis['missing_values']}
    - Summary Statistics: {analysis['summary_statistics']}

    Write a short summary of the dataset, key insights, and recommendations. Refer to the charts where necessary.
    """
    url = f"{api_proxy_base_url}/chat/completions"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_proxy_token}"
    }
    data = {
        "model": "gpt-4o-mini",
        "messages": [{"role": "user", "content": summary_prompt}],
        "temperature": 0.7
    }

    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        return result["choices"][0]["message"]["content"]
    except requests.exceptions.RequestException as e:
        return f"Story generation failed: {e}"

def save_markdown(story, charts, output_file):
    """Save the narrated story and chart references to a README.md file."""
    with open(output_file, "w") as f:
        f.write("# Analysis Report\n\n")
        f.write(story + "\n\n")
        for chart in charts:
            f.write(f"![Chart](./{chart})\n")

def main():
    # Check if a file is provided as a command-line argument
    if len(sys.argv) < 2:
        print("Usage: python autolysis.py <csv_file>")
        return

    # Get the CSV filename from the command line
    filename = sys.argv[1]

    # Ensure the file exists
    if not os.path.exists(filename):
        print(f"File {filename} not found.")
        return

    # Load dataset
    df = read_csv(filename)

    # Analyze dataset
    analysis = analyze_data(df)

    # Visualize data
    output_prefix = filename.split(".")[0]  # Use CSV filename as prefix
    charts = visualize_data(df, output_prefix)

    # Narrate story
    story = narrate_story(analysis, charts, filename)

    # Save README.md
    readme_file = f"README_{output_prefix}.md"  # Dynamically name README
    save_markdown(story, charts, readme_file)

    print(f"Analysis completed for {filename}. Check {readme_file} and charts.")

if __name__ == "__main__":
    main()